
robotska-ruka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080024c0  080024c0  000124c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002500  08002500  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002500  08002500  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002500  08002500  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002500  08002500  00012500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  2000000c  08002514  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08002514  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004b4b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001204  00000000  00000000  00024b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000548  00000000  00000000  00025d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004a0  00000000  00000000  000262d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f39  00000000  00000000  00026770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000051a5  00000000  00000000  0003c6a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e9fe  00000000  00000000  0004184e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c024c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001350  00000000  00000000  000c02c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080024a8 	.word	0x080024a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080024a8 	.word	0x080024a8

0800014c <ADC_SELECT_CH0>:
void getADCValues(uint32_t *adcResultX, uint32_t *adcResultY);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_SELECT_CH0(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 800015c:	2302      	movs	r3, #2
 800015e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000160:	2301      	movs	r3, #1
 8000162:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000164:	2300      	movs	r3, #0
 8000166:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000168:	1d3b      	adds	r3, r7, #4
 800016a:	4619      	mov	r1, r3
 800016c:	4805      	ldr	r0, [pc, #20]	; (8000184 <ADC_SELECT_CH0+0x38>)
 800016e:	f000 ffaf 	bl	80010d0 <HAL_ADC_ConfigChannel>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d001      	beq.n	800017c <ADC_SELECT_CH0+0x30>
		Error_Handler();
 8000178:	f000 fb84 	bl	8000884 <Error_Handler>
	}
}
 800017c:	bf00      	nop
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}
 8000184:	2000002c 	.word	0x2000002c

08000188 <ADC_SELECT_CH1>:
void ADC_SELECT_CH1(void) {
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000198:	2304      	movs	r3, #4
 800019a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	4619      	mov	r1, r3
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <ADC_SELECT_CH1+0x34>)
 80001a6:	f000 ff93 	bl	80010d0 <HAL_ADC_ConfigChannel>
 80001aa:	4603      	mov	r3, r0
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d001      	beq.n	80001b4 <ADC_SELECT_CH1+0x2c>
		Error_Handler();
 80001b0:	f000 fb68 	bl	8000884 <Error_Handler>
	}
}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	2000002c 	.word	0x2000002c

080001c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c6:	f000 fc3b 	bl	8000a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ca:	f000 f83f 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ce:	f000 f8bd 	bl	800034c <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d2:	f000 f88b 	bl	80002ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	initAxes();
 80001d6:	f000 f923 	bl	8000420 <initAxes>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		getADCValues(&adcResultX, &adcResultY);
 80001da:	4919      	ldr	r1, [pc, #100]	; (8000240 <main+0x80>)
 80001dc:	4819      	ldr	r0, [pc, #100]	; (8000244 <main+0x84>)
 80001de:	f000 fb01 	bl	80007e4 <getADCValues>

		int xValue = (adcResultX * 100) / 4095;
 80001e2:	4b18      	ldr	r3, [pc, #96]	; (8000244 <main+0x84>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2264      	movs	r2, #100	; 0x64
 80001e8:	fb02 f203 	mul.w	r2, r2, r3
 80001ec:	4b16      	ldr	r3, [pc, #88]	; (8000248 <main+0x88>)
 80001ee:	fba3 1302 	umull	r1, r3, r3, r2
 80001f2:	1ad2      	subs	r2, r2, r3
 80001f4:	0852      	lsrs	r2, r2, #1
 80001f6:	4413      	add	r3, r2
 80001f8:	0adb      	lsrs	r3, r3, #11
 80001fa:	607b      	str	r3, [r7, #4]
		setAxis(xValue == 100 ? 99 : xValue, 'X');
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2b64      	cmp	r3, #100	; 0x64
 8000200:	d001      	beq.n	8000206 <main+0x46>
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	e000      	b.n	8000208 <main+0x48>
 8000206:	2363      	movs	r3, #99	; 0x63
 8000208:	2158      	movs	r1, #88	; 0x58
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f9c2 	bl	8000594 <setAxis>
		int yValue = (adcResultY * 100) / 4095;
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <main+0x80>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2264      	movs	r2, #100	; 0x64
 8000216:	fb02 f203 	mul.w	r2, r2, r3
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <main+0x88>)
 800021c:	fba3 1302 	umull	r1, r3, r3, r2
 8000220:	1ad2      	subs	r2, r2, r3
 8000222:	0852      	lsrs	r2, r2, #1
 8000224:	4413      	add	r3, r2
 8000226:	0adb      	lsrs	r3, r3, #11
 8000228:	603b      	str	r3, [r7, #0]
		setAxis(yValue == 100 ? 99 : yValue, 'Y');
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	2b64      	cmp	r3, #100	; 0x64
 800022e:	d001      	beq.n	8000234 <main+0x74>
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	e000      	b.n	8000236 <main+0x76>
 8000234:	2363      	movs	r3, #99	; 0x63
 8000236:	2159      	movs	r1, #89	; 0x59
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f9ab 	bl	8000594 <setAxis>
	while (1) {
 800023e:	e7cc      	b.n	80001da <main+0x1a>
 8000240:	2000005c 	.word	0x2000005c
 8000244:	20000028 	.word	0x20000028
 8000248:	00100101 	.word	0x00100101

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b094      	sub	sp, #80	; 0x50
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f002 f91c 	bl	8002498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 0314 	add.w	r3, r7, #20
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027c:	2302      	movs	r3, #2
 800027e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000284:	2310      	movs	r3, #16
 8000286:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000288:	2300      	movs	r3, #0
 800028a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000290:	4618      	mov	r0, r3
 8000292:	f001 fb63 	bl	800195c <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800029c:	f000 faf2 	bl	8000884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a4:	2300      	movs	r3, #0
 80002a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fdce 	bl	8001e5c <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002c6:	f000 fadd 	bl	8000884 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ca:	2302      	movs	r3, #2
 80002cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4618      	mov	r0, r3
 80002d6:	f001 ff49 	bl	800216c <HAL_RCCEx_PeriphCLKConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002e0:	f000 fad0 	bl	8000884 <Error_Handler>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3750      	adds	r7, #80	; 0x50
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_ADC1_Init+0x58>)
 80002fe:	4a12      	ldr	r2, [pc, #72]	; (8000348 <MX_ADC1_Init+0x5c>)
 8000300:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <MX_ADC1_Init+0x58>)
 8000304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000308:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_ADC1_Init+0x58>)
 800030c:	2201      	movs	r2, #1
 800030e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_ADC1_Init+0x58>)
 8000312:	2200      	movs	r2, #0
 8000314:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <MX_ADC1_Init+0x58>)
 8000318:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800031c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_ADC1_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <MX_ADC1_Init+0x58>)
 8000326:	2201      	movs	r2, #1
 8000328:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800032a:	4806      	ldr	r0, [pc, #24]	; (8000344 <MX_ADC1_Init+0x58>)
 800032c:	f000 fc0c 	bl	8000b48 <HAL_ADC_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000336:	f000 faa5 	bl	8000884 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	2000002c 	.word	0x2000002c
 8000348:	40012400 	.word	0x40012400

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000360:	4b2b      	ldr	r3, [pc, #172]	; (8000410 <MX_GPIO_Init+0xc4>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <MX_GPIO_Init+0xc4>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b28      	ldr	r3, [pc, #160]	; (8000410 <MX_GPIO_Init+0xc4>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0304 	and.w	r3, r3, #4
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000378:	4b25      	ldr	r3, [pc, #148]	; (8000410 <MX_GPIO_Init+0xc4>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a24      	ldr	r2, [pc, #144]	; (8000410 <MX_GPIO_Init+0xc4>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b22      	ldr	r3, [pc, #136]	; (8000410 <MX_GPIO_Init+0xc4>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0308 	and.w	r3, r3, #8
 800038c:	603b      	str	r3, [r7, #0]
 800038e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	218a      	movs	r1, #138	; 0x8a
 8000394:	481f      	ldr	r0, [pc, #124]	; (8000414 <MX_GPIO_Init+0xc8>)
 8000396:	f001 faa6 	bl	80018e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800039a:	2200      	movs	r2, #0
 800039c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80003a0:	481d      	ldr	r0, [pc, #116]	; (8000418 <MX_GPIO_Init+0xcc>)
 80003a2:	f001 faa0 	bl	80018e6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003a6:	2301      	movs	r3, #1
 80003a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003aa:	4b1c      	ldr	r3, [pc, #112]	; (800041c <MX_GPIO_Init+0xd0>)
 80003ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	4619      	mov	r1, r3
 80003b8:	4816      	ldr	r0, [pc, #88]	; (8000414 <MX_GPIO_Init+0xc8>)
 80003ba:	f001 f92b 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 80003be:	238a      	movs	r3, #138	; 0x8a
 80003c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2302      	movs	r3, #2
 80003cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ce:	f107 0308 	add.w	r3, r7, #8
 80003d2:	4619      	mov	r1, r3
 80003d4:	480f      	ldr	r0, [pc, #60]	; (8000414 <MX_GPIO_Init+0xc8>)
 80003d6:	f001 f91d 	bl	8001614 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80003da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003de:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2302      	movs	r3, #2
 80003ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ec:	f107 0308 	add.w	r3, r7, #8
 80003f0:	4619      	mov	r1, r3
 80003f2:	4809      	ldr	r0, [pc, #36]	; (8000418 <MX_GPIO_Init+0xcc>)
 80003f4:	f001 f90e 	bl	8001614 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2100      	movs	r1, #0
 80003fc:	2006      	movs	r0, #6
 80003fe:	f001 f8d2 	bl	80015a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000402:	2006      	movs	r0, #6
 8000404:	f001 f8eb 	bl	80015de <HAL_NVIC_EnableIRQ>

}
 8000408:	bf00      	nop
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40021000 	.word	0x40021000
 8000414:	40010800 	.word	0x40010800
 8000418:	40010c00 	.word	0x40010c00
 800041c:	10210000 	.word	0x10210000

08000420 <initAxes>:

/* USER CODE BEGIN 4 */
void initAxes(void) {
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISPLAY_PORT, XJ1, GPIO_PIN_SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2101      	movs	r1, #1
 8000428:	4859      	ldr	r0, [pc, #356]	; (8000590 <initAxes+0x170>)
 800042a:	f001 fa5c 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, XJ2, GPIO_PIN_SET);
 800042e:	2201      	movs	r2, #1
 8000430:	2102      	movs	r1, #2
 8000432:	4857      	ldr	r0, [pc, #348]	; (8000590 <initAxes+0x170>)
 8000434:	f001 fa57 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, XJ3, GPIO_PIN_SET);
 8000438:	2201      	movs	r2, #1
 800043a:	2104      	movs	r1, #4
 800043c:	4854      	ldr	r0, [pc, #336]	; (8000590 <initAxes+0x170>)
 800043e:	f001 fa52 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, XJ4, GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2108      	movs	r1, #8
 8000446:	4852      	ldr	r0, [pc, #328]	; (8000590 <initAxes+0x170>)
 8000448:	f001 fa4d 	bl	80018e6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DISPLAY_PORT, XD1, GPIO_PIN_SET);
 800044c:	2201      	movs	r2, #1
 800044e:	2110      	movs	r1, #16
 8000450:	484f      	ldr	r0, [pc, #316]	; (8000590 <initAxes+0x170>)
 8000452:	f001 fa48 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, XD2, GPIO_PIN_SET);
 8000456:	2201      	movs	r2, #1
 8000458:	2120      	movs	r1, #32
 800045a:	484d      	ldr	r0, [pc, #308]	; (8000590 <initAxes+0x170>)
 800045c:	f001 fa43 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, XD3, GPIO_PIN_SET);
 8000460:	2201      	movs	r2, #1
 8000462:	2140      	movs	r1, #64	; 0x40
 8000464:	484a      	ldr	r0, [pc, #296]	; (8000590 <initAxes+0x170>)
 8000466:	f001 fa3e 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, XD4, GPIO_PIN_SET);
 800046a:	2201      	movs	r2, #1
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	4848      	ldr	r0, [pc, #288]	; (8000590 <initAxes+0x170>)
 8000470:	f001 fa39 	bl	80018e6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DISPLAY_PORT, YJ1, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047a:	4845      	ldr	r0, [pc, #276]	; (8000590 <initAxes+0x170>)
 800047c:	f001 fa33 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, YJ2, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000486:	4842      	ldr	r0, [pc, #264]	; (8000590 <initAxes+0x170>)
 8000488:	f001 fa2d 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, YJ3, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000492:	483f      	ldr	r0, [pc, #252]	; (8000590 <initAxes+0x170>)
 8000494:	f001 fa27 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, YJ4, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800049e:	483c      	ldr	r0, [pc, #240]	; (8000590 <initAxes+0x170>)
 80004a0:	f001 fa21 	bl	80018e6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DISPLAY_PORT, YD1, GPIO_PIN_SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004aa:	4839      	ldr	r0, [pc, #228]	; (8000590 <initAxes+0x170>)
 80004ac:	f001 fa1b 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, YD2, GPIO_PIN_SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b6:	4836      	ldr	r0, [pc, #216]	; (8000590 <initAxes+0x170>)
 80004b8:	f001 fa15 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, YD3, GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004c2:	4833      	ldr	r0, [pc, #204]	; (8000590 <initAxes+0x170>)
 80004c4:	f001 fa0f 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, YD4, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ce:	4830      	ldr	r0, [pc, #192]	; (8000590 <initAxes+0x170>)
 80004d0:	f001 fa09 	bl	80018e6 <HAL_GPIO_WritePin>

	HAL_Delay(300);
 80004d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004d8:	f000 fb14 	bl	8000b04 <HAL_Delay>

	HAL_GPIO_WritePin(DISPLAY_PORT, XJ1, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2101      	movs	r1, #1
 80004e0:	482b      	ldr	r0, [pc, #172]	; (8000590 <initAxes+0x170>)
 80004e2:	f001 fa00 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, XJ2, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2102      	movs	r1, #2
 80004ea:	4829      	ldr	r0, [pc, #164]	; (8000590 <initAxes+0x170>)
 80004ec:	f001 f9fb 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, XJ3, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2104      	movs	r1, #4
 80004f4:	4826      	ldr	r0, [pc, #152]	; (8000590 <initAxes+0x170>)
 80004f6:	f001 f9f6 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, XJ4, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2108      	movs	r1, #8
 80004fe:	4824      	ldr	r0, [pc, #144]	; (8000590 <initAxes+0x170>)
 8000500:	f001 f9f1 	bl	80018e6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DISPLAY_PORT, XD1, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2110      	movs	r1, #16
 8000508:	4821      	ldr	r0, [pc, #132]	; (8000590 <initAxes+0x170>)
 800050a:	f001 f9ec 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, XD2, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	2120      	movs	r1, #32
 8000512:	481f      	ldr	r0, [pc, #124]	; (8000590 <initAxes+0x170>)
 8000514:	f001 f9e7 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, XD3, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2140      	movs	r1, #64	; 0x40
 800051c:	481c      	ldr	r0, [pc, #112]	; (8000590 <initAxes+0x170>)
 800051e:	f001 f9e2 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, XD4, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	481a      	ldr	r0, [pc, #104]	; (8000590 <initAxes+0x170>)
 8000528:	f001 f9dd 	bl	80018e6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DISPLAY_PORT, YJ1, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000532:	4817      	ldr	r0, [pc, #92]	; (8000590 <initAxes+0x170>)
 8000534:	f001 f9d7 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, YJ2, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053e:	4814      	ldr	r0, [pc, #80]	; (8000590 <initAxes+0x170>)
 8000540:	f001 f9d1 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, YJ3, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054a:	4811      	ldr	r0, [pc, #68]	; (8000590 <initAxes+0x170>)
 800054c:	f001 f9cb 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, YJ4, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000556:	480e      	ldr	r0, [pc, #56]	; (8000590 <initAxes+0x170>)
 8000558:	f001 f9c5 	bl	80018e6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DISPLAY_PORT, YD1, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <initAxes+0x170>)
 8000564:	f001 f9bf 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, YD2, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056e:	4808      	ldr	r0, [pc, #32]	; (8000590 <initAxes+0x170>)
 8000570:	f001 f9b9 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, YD3, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <initAxes+0x170>)
 800057c:	f001 f9b3 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_PORT, YD4, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000586:	4802      	ldr	r0, [pc, #8]	; (8000590 <initAxes+0x170>)
 8000588:	f001 f9ad 	bl	80018e6 <HAL_GPIO_WritePin>

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40010c00 	.word	0x40010c00

08000594 <setAxis>:

void setAxis(int coordinate, char axis) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
	setAxisJ(coordinate % 10, axis);
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <setAxis+0x4c>)
 80005a4:	fb83 1302 	smull	r1, r3, r3, r2
 80005a8:	1099      	asrs	r1, r3, #2
 80005aa:	17d3      	asrs	r3, r2, #31
 80005ac:	1ac8      	subs	r0, r1, r3
 80005ae:	4603      	mov	r3, r0
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	4403      	add	r3, r0
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	1ad0      	subs	r0, r2, r3
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	4619      	mov	r1, r3
 80005bc:	f000 f812 	bl	80005e4 <setAxisJ>
	setAxisD(coordinate / 10, axis);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <setAxis+0x4c>)
 80005c4:	fb82 1203 	smull	r1, r2, r2, r3
 80005c8:	1092      	asrs	r2, r2, #2
 80005ca:	17db      	asrs	r3, r3, #31
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	78fa      	ldrb	r2, [r7, #3]
 80005d0:	4611      	mov	r1, r2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f886 	bl	80006e4 <setAxisD>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	66666667 	.word	0x66666667

080005e4 <setAxisJ>:
void setAxisJ(int partialCoordinate, char axis) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
	if (axis == 'X') {
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	2b58      	cmp	r3, #88	; 0x58
 80005f4:	d134      	bne.n	8000660 <setAxisJ+0x7c>
		HAL_GPIO_WritePin(DISPLAY_PORT, XJ1,
		CHECK_BIT(partialCoordinate, 0) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f003 0301 	and.w	r3, r3, #1
		HAL_GPIO_WritePin(DISPLAY_PORT, XJ1,
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf14      	ite	ne
 8000600:	2301      	movne	r3, #1
 8000602:	2300      	moveq	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	2101      	movs	r1, #1
 800060a:	4835      	ldr	r0, [pc, #212]	; (80006e0 <setAxisJ+0xfc>)
 800060c:	f001 f96b 	bl	80018e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_PORT, XJ2,
		CHECK_BIT(partialCoordinate, 1) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0302 	and.w	r3, r3, #2
		HAL_GPIO_WritePin(DISPLAY_PORT, XJ2,
 8000616:	2b00      	cmp	r3, #0
 8000618:	bf14      	ite	ne
 800061a:	2301      	movne	r3, #1
 800061c:	2300      	moveq	r3, #0
 800061e:	b2db      	uxtb	r3, r3
 8000620:	461a      	mov	r2, r3
 8000622:	2102      	movs	r1, #2
 8000624:	482e      	ldr	r0, [pc, #184]	; (80006e0 <setAxisJ+0xfc>)
 8000626:	f001 f95e 	bl	80018e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_PORT, XJ3,
		CHECK_BIT(partialCoordinate, 2) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f003 0304 	and.w	r3, r3, #4
		HAL_GPIO_WritePin(DISPLAY_PORT, XJ3,
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf14      	ite	ne
 8000634:	2301      	movne	r3, #1
 8000636:	2300      	moveq	r3, #0
 8000638:	b2db      	uxtb	r3, r3
 800063a:	461a      	mov	r2, r3
 800063c:	2104      	movs	r1, #4
 800063e:	4828      	ldr	r0, [pc, #160]	; (80006e0 <setAxisJ+0xfc>)
 8000640:	f001 f951 	bl	80018e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_PORT, XJ4,
		CHECK_BIT(partialCoordinate, 3) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0308 	and.w	r3, r3, #8
		HAL_GPIO_WritePin(DISPLAY_PORT, XJ4,
 800064a:	2b00      	cmp	r3, #0
 800064c:	bf14      	ite	ne
 800064e:	2301      	movne	r3, #1
 8000650:	2300      	moveq	r3, #0
 8000652:	b2db      	uxtb	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	2108      	movs	r1, #8
 8000658:	4821      	ldr	r0, [pc, #132]	; (80006e0 <setAxisJ+0xfc>)
 800065a:	f001 f944 	bl	80018e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_PORT, YJ3,
		CHECK_BIT(partialCoordinate, 2) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
		HAL_GPIO_WritePin(DISPLAY_PORT, YJ4,
		CHECK_BIT(partialCoordinate, 3) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
	}
}
 800065e:	e03a      	b.n	80006d6 <setAxisJ+0xf2>
	} else if (axis == 'Y') {
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	2b59      	cmp	r3, #89	; 0x59
 8000664:	d137      	bne.n	80006d6 <setAxisJ+0xf2>
		CHECK_BIT(partialCoordinate, 0) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f003 0301 	and.w	r3, r3, #1
		HAL_GPIO_WritePin(DISPLAY_PORT, YJ1,
 800066c:	2b00      	cmp	r3, #0
 800066e:	bf14      	ite	ne
 8000670:	2301      	movne	r3, #1
 8000672:	2300      	moveq	r3, #0
 8000674:	b2db      	uxtb	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067c:	4818      	ldr	r0, [pc, #96]	; (80006e0 <setAxisJ+0xfc>)
 800067e:	f001 f932 	bl	80018e6 <HAL_GPIO_WritePin>
		CHECK_BIT(partialCoordinate, 1) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f003 0302 	and.w	r3, r3, #2
		HAL_GPIO_WritePin(DISPLAY_PORT, YJ2,
 8000688:	2b00      	cmp	r3, #0
 800068a:	bf14      	ite	ne
 800068c:	2301      	movne	r3, #1
 800068e:	2300      	moveq	r3, #0
 8000690:	b2db      	uxtb	r3, r3
 8000692:	461a      	mov	r2, r3
 8000694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000698:	4811      	ldr	r0, [pc, #68]	; (80006e0 <setAxisJ+0xfc>)
 800069a:	f001 f924 	bl	80018e6 <HAL_GPIO_WritePin>
		CHECK_BIT(partialCoordinate, 2) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f003 0304 	and.w	r3, r3, #4
		HAL_GPIO_WritePin(DISPLAY_PORT, YJ3,
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf14      	ite	ne
 80006a8:	2301      	movne	r3, #1
 80006aa:	2300      	moveq	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <setAxisJ+0xfc>)
 80006b6:	f001 f916 	bl	80018e6 <HAL_GPIO_WritePin>
		CHECK_BIT(partialCoordinate, 3) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f003 0308 	and.w	r3, r3, #8
		HAL_GPIO_WritePin(DISPLAY_PORT, YJ4,
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	bf14      	ite	ne
 80006c4:	2301      	movne	r3, #1
 80006c6:	2300      	moveq	r3, #0
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <setAxisJ+0xfc>)
 80006d2:	f001 f908 	bl	80018e6 <HAL_GPIO_WritePin>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40010c00 	.word	0x40010c00

080006e4 <setAxisD>:
void setAxisD(int partialCoordinate, char axis) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
	if (axis == 'X') {
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	2b58      	cmp	r3, #88	; 0x58
 80006f4:	d134      	bne.n	8000760 <setAxisD+0x7c>
		HAL_GPIO_WritePin(DISPLAY_PORT, XD1,
		CHECK_BIT(partialCoordinate, 0) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f003 0301 	and.w	r3, r3, #1
		HAL_GPIO_WritePin(DISPLAY_PORT, XD1,
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf14      	ite	ne
 8000700:	2301      	movne	r3, #1
 8000702:	2300      	moveq	r3, #0
 8000704:	b2db      	uxtb	r3, r3
 8000706:	461a      	mov	r2, r3
 8000708:	2110      	movs	r1, #16
 800070a:	4835      	ldr	r0, [pc, #212]	; (80007e0 <setAxisD+0xfc>)
 800070c:	f001 f8eb 	bl	80018e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_PORT, XD2,
		CHECK_BIT(partialCoordinate, 1) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f003 0302 	and.w	r3, r3, #2
		HAL_GPIO_WritePin(DISPLAY_PORT, XD2,
 8000716:	2b00      	cmp	r3, #0
 8000718:	bf14      	ite	ne
 800071a:	2301      	movne	r3, #1
 800071c:	2300      	moveq	r3, #0
 800071e:	b2db      	uxtb	r3, r3
 8000720:	461a      	mov	r2, r3
 8000722:	2120      	movs	r1, #32
 8000724:	482e      	ldr	r0, [pc, #184]	; (80007e0 <setAxisD+0xfc>)
 8000726:	f001 f8de 	bl	80018e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_PORT, XD3,
		CHECK_BIT(partialCoordinate, 2) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f003 0304 	and.w	r3, r3, #4
		HAL_GPIO_WritePin(DISPLAY_PORT, XD3,
 8000730:	2b00      	cmp	r3, #0
 8000732:	bf14      	ite	ne
 8000734:	2301      	movne	r3, #1
 8000736:	2300      	moveq	r3, #0
 8000738:	b2db      	uxtb	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	2140      	movs	r1, #64	; 0x40
 800073e:	4828      	ldr	r0, [pc, #160]	; (80007e0 <setAxisD+0xfc>)
 8000740:	f001 f8d1 	bl	80018e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_PORT, XD4,
		CHECK_BIT(partialCoordinate, 3) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f003 0308 	and.w	r3, r3, #8
		HAL_GPIO_WritePin(DISPLAY_PORT, XD4,
 800074a:	2b00      	cmp	r3, #0
 800074c:	bf14      	ite	ne
 800074e:	2301      	movne	r3, #1
 8000750:	2300      	moveq	r3, #0
 8000752:	b2db      	uxtb	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	4821      	ldr	r0, [pc, #132]	; (80007e0 <setAxisD+0xfc>)
 800075a:	f001 f8c4 	bl	80018e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DISPLAY_PORT, YD3,
		CHECK_BIT(partialCoordinate, 2) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
		HAL_GPIO_WritePin(DISPLAY_PORT, YD4,
		CHECK_BIT(partialCoordinate, 3) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
	}
}
 800075e:	e03a      	b.n	80007d6 <setAxisD+0xf2>
	} else if (axis == 'Y') {
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2b59      	cmp	r3, #89	; 0x59
 8000764:	d137      	bne.n	80007d6 <setAxisD+0xf2>
		CHECK_BIT(partialCoordinate, 0) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f003 0301 	and.w	r3, r3, #1
		HAL_GPIO_WritePin(DISPLAY_PORT, YD1,
 800076c:	2b00      	cmp	r3, #0
 800076e:	bf14      	ite	ne
 8000770:	2301      	movne	r3, #1
 8000772:	2300      	moveq	r3, #0
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077c:	4818      	ldr	r0, [pc, #96]	; (80007e0 <setAxisD+0xfc>)
 800077e:	f001 f8b2 	bl	80018e6 <HAL_GPIO_WritePin>
		CHECK_BIT(partialCoordinate, 1) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f003 0302 	and.w	r3, r3, #2
		HAL_GPIO_WritePin(DISPLAY_PORT, YD2,
 8000788:	2b00      	cmp	r3, #0
 800078a:	bf14      	ite	ne
 800078c:	2301      	movne	r3, #1
 800078e:	2300      	moveq	r3, #0
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000798:	4811      	ldr	r0, [pc, #68]	; (80007e0 <setAxisD+0xfc>)
 800079a:	f001 f8a4 	bl	80018e6 <HAL_GPIO_WritePin>
		CHECK_BIT(partialCoordinate, 2) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f003 0304 	and.w	r3, r3, #4
		HAL_GPIO_WritePin(DISPLAY_PORT, YD3,
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bf14      	ite	ne
 80007a8:	2301      	movne	r3, #1
 80007aa:	2300      	moveq	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <setAxisD+0xfc>)
 80007b6:	f001 f896 	bl	80018e6 <HAL_GPIO_WritePin>
		CHECK_BIT(partialCoordinate, 3) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f003 0308 	and.w	r3, r3, #8
		HAL_GPIO_WritePin(DISPLAY_PORT, YD4,
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	bf14      	ite	ne
 80007c4:	2301      	movne	r3, #1
 80007c6:	2300      	moveq	r3, #0
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <setAxisD+0xfc>)
 80007d2:	f001 f888 	bl	80018e6 <HAL_GPIO_WritePin>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40010c00 	.word	0x40010c00

080007e4 <getADCValues>:
void getADCValues(uint32_t *adcResultX, uint32_t *adcResultY) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(ADC_PORT, ADCX, GPIO_PIN_SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2102      	movs	r1, #2
 80007f2:	4822      	ldr	r0, [pc, #136]	; (800087c <getADCValues+0x98>)
 80007f4:	f001 f877 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADC_PORT, ADCY, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2108      	movs	r1, #8
 80007fc:	481f      	ldr	r0, [pc, #124]	; (800087c <getADCValues+0x98>)
 80007fe:	f001 f872 	bl	80018e6 <HAL_GPIO_WritePin>

	HAL_Delay(300);
 8000802:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000806:	f000 f97d 	bl	8000b04 <HAL_Delay>
	ADC_SELECT_CH0();
 800080a:	f7ff fc9f 	bl	800014c <ADC_SELECT_CH0>
	HAL_ADC_Start(&hadc1);
 800080e:	481c      	ldr	r0, [pc, #112]	; (8000880 <getADCValues+0x9c>)
 8000810:	f000 fa72 	bl	8000cf8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000814:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000818:	4819      	ldr	r0, [pc, #100]	; (8000880 <getADCValues+0x9c>)
 800081a:	f000 fb47 	bl	8000eac <HAL_ADC_PollForConversion>
	*adcResultX = HAL_ADC_GetValue(&hadc1);
 800081e:	4818      	ldr	r0, [pc, #96]	; (8000880 <getADCValues+0x9c>)
 8000820:	f000 fc4a 	bl	80010b8 <HAL_ADC_GetValue>
 8000824:	4602      	mov	r2, r0
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800082a:	4815      	ldr	r0, [pc, #84]	; (8000880 <getADCValues+0x9c>)
 800082c:	f000 fb12 	bl	8000e54 <HAL_ADC_Stop>

	ADC_SELECT_CH1();
 8000830:	f7ff fcaa 	bl	8000188 <ADC_SELECT_CH1>
	HAL_ADC_Start(&hadc1);
 8000834:	4812      	ldr	r0, [pc, #72]	; (8000880 <getADCValues+0x9c>)
 8000836:	f000 fa5f 	bl	8000cf8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800083a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800083e:	4810      	ldr	r0, [pc, #64]	; (8000880 <getADCValues+0x9c>)
 8000840:	f000 fb34 	bl	8000eac <HAL_ADC_PollForConversion>
	*adcResultY = HAL_ADC_GetValue(&hadc1);
 8000844:	480e      	ldr	r0, [pc, #56]	; (8000880 <getADCValues+0x9c>)
 8000846:	f000 fc37 	bl	80010b8 <HAL_ADC_GetValue>
 800084a:	4602      	mov	r2, r0
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <getADCValues+0x9c>)
 8000852:	f000 faff 	bl	8000e54 <HAL_ADC_Stop>

	HAL_GPIO_WritePin(ADC_PORT, ADCX, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2102      	movs	r1, #2
 800085a:	4808      	ldr	r0, [pc, #32]	; (800087c <getADCValues+0x98>)
 800085c:	f001 f843 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADC_PORT, ADCY, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2108      	movs	r1, #8
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <getADCValues+0x98>)
 8000866:	f001 f83e 	bl	80018e6 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800086a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800086e:	f000 f949 	bl	8000b04 <HAL_Delay>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40010800 	.word	0x40010800
 8000880:	2000002c 	.word	0x2000002c

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_MspInit+0x5c>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <HAL_MspInit+0x5c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6193      	str	r3, [r2, #24]
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_MspInit+0x5c>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x5c>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_MspInit+0x5c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_MspInit+0x5c>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_MspInit+0x60>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <HAL_MspInit+0x60>)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010000 	.word	0x40010000

080008f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <HAL_ADC_MspInit+0x6c>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d121      	bne.n	8000958 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_ADC_MspInit+0x70>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a12      	ldr	r2, [pc, #72]	; (8000964 <HAL_ADC_MspInit+0x70>)
 800091a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <HAL_ADC_MspInit+0x70>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <HAL_ADC_MspInit+0x70>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <HAL_ADC_MspInit+0x70>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_ADC_MspInit+0x70>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000944:	2314      	movs	r3, #20
 8000946:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000948:	2303      	movs	r3, #3
 800094a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4619      	mov	r1, r3
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <HAL_ADC_MspInit+0x74>)
 8000954:	f000 fe5e 	bl	8001614 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000958:	bf00      	nop
 800095a:	3720      	adds	r7, #32
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40012400 	.word	0x40012400
 8000964:	40021000 	.word	0x40021000
 8000968:	40010800 	.word	0x40010800

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <HardFault_Handler+0x4>

0800097e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <BusFault_Handler+0x4>

0800098a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f888 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
//	for (int i = 0; i < 65535; i++);
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80009c4:	2101      	movs	r1, #1
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <EXTI0_IRQHandler+0x24>)
 80009c8:	f000 ff76 	bl	80018b8 <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d003      	beq.n	80009da <EXTI0_IRQHandler+0x1a>
		HAL_Delay(5000);
 80009d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80009d6:	f000 f895 	bl	8000b04 <HAL_Delay>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 ff9c 	bl	8001918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40010800 	.word	0x40010800

080009e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009f6:	490d      	ldr	r1, [pc, #52]	; (8000a2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009fc:	e002      	b.n	8000a04 <LoopCopyDataInit>

080009fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a02:	3304      	adds	r3, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a08:	d3f9      	bcc.n	80009fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a0c:	4c0a      	ldr	r4, [pc, #40]	; (8000a38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a10:	e001      	b.n	8000a16 <LoopFillZerobss>

08000a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a14:	3204      	adds	r2, #4

08000a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a18:	d3fb      	bcc.n	8000a12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a1a:	f7ff ffe5 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f001 fd17 	bl	8002450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a22:	f7ff fbcd 	bl	80001c0 <main>
  bx lr
 8000a26:	4770      	bx	lr
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a30:	08002508 	.word	0x08002508
  ldr r2, =_sbss
 8000a34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a38:	20000064 	.word	0x20000064

08000a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_2_IRQHandler>
	...

08000a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_Init+0x28>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_Init+0x28>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 fd9d 	bl	8001590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 f808 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff ff18 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40022000 	.word	0x40022000

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x54>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x58>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fdb5 	bl	80015fa <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00e      	b.n	8000ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f000 fd7d 	bl	80015a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <HAL_InitTick+0x5c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_IncTick+0x1c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_IncTick+0x20>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a03      	ldr	r2, [pc, #12]	; (8000aec <HAL_IncTick+0x20>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000060 	.word	0x20000060

08000af0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <HAL_GetTick+0x10>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	20000060 	.word	0x20000060

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff fff0 	bl	8000af0 <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_Delay+0x40>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffe0 	bl	8000af0 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000008 	.word	0x20000008

08000b48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e0be      	b.n	8000ce8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d109      	bne.n	8000b8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff feb4 	bl	80008f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 fbf1 	bl	8001374 <ADC_ConversionStop_Disable>
 8000b92:	4603      	mov	r3, r0
 8000b94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8099 	bne.w	8000cd6 <HAL_ADC_Init+0x18e>
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8095 	bne.w	8000cd6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bb4:	f023 0302 	bic.w	r3, r3, #2
 8000bb8:	f043 0202 	orr.w	r2, r3, #2
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7b1b      	ldrb	r3, [r3, #12]
 8000bce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000be0:	d003      	beq.n	8000bea <HAL_ADC_Init+0xa2>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d102      	bne.n	8000bf0 <HAL_ADC_Init+0xa8>
 8000bea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bee:	e000      	b.n	8000bf2 <HAL_ADC_Init+0xaa>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7d1b      	ldrb	r3, [r3, #20]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d119      	bne.n	8000c34 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7b1b      	ldrb	r3, [r3, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d109      	bne.n	8000c1c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	035a      	lsls	r2, r3, #13
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	e00b      	b.n	8000c34 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c20:	f043 0220 	orr.w	r2, r3, #32
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2c:	f043 0201 	orr.w	r2, r3, #1
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <HAL_ADC_Init+0x1a8>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	6812      	ldr	r2, [r2, #0]
 8000c56:	68b9      	ldr	r1, [r7, #8]
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c64:	d003      	beq.n	8000c6e <HAL_ADC_Init+0x126>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d104      	bne.n	8000c78 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	051b      	lsls	r3, r3, #20
 8000c76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_ADC_Init+0x1ac>)
 8000c94:	4013      	ands	r3, r2
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d10b      	bne.n	8000cb4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca6:	f023 0303 	bic.w	r3, r3, #3
 8000caa:	f043 0201 	orr.w	r2, r3, #1
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cb2:	e018      	b.n	8000ce6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb8:	f023 0312 	bic.w	r3, r3, #18
 8000cbc:	f043 0210 	orr.w	r2, r3, #16
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc8:	f043 0201 	orr.w	r2, r3, #1
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cd4:	e007      	b.n	8000ce6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cda:	f043 0210 	orr.w	r2, r3, #16
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	ffe1f7fd 	.word	0xffe1f7fd
 8000cf4:	ff1f0efe 	.word	0xff1f0efe

08000cf8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d101      	bne.n	8000d12 <HAL_ADC_Start+0x1a>
 8000d0e:	2302      	movs	r3, #2
 8000d10:	e098      	b.n	8000e44 <HAL_ADC_Start+0x14c>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 fad0 	bl	80012c0 <ADC_Enable>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 8087 	bne.w	8000e3a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d34:	f023 0301 	bic.w	r3, r3, #1
 8000d38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a41      	ldr	r2, [pc, #260]	; (8000e4c <HAL_ADC_Start+0x154>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d105      	bne.n	8000d56 <HAL_ADC_Start+0x5e>
 8000d4a:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <HAL_ADC_Start+0x158>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d115      	bne.n	8000d82 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d026      	beq.n	8000dbe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d80:	e01d      	b.n	8000dbe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a2f      	ldr	r2, [pc, #188]	; (8000e50 <HAL_ADC_Start+0x158>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d004      	beq.n	8000da2 <HAL_ADC_Start+0xaa>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a2b      	ldr	r2, [pc, #172]	; (8000e4c <HAL_ADC_Start+0x154>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10d      	bne.n	8000dbe <HAL_ADC_Start+0xc6>
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <HAL_ADC_Start+0x158>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d007      	beq.n	8000dbe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d006      	beq.n	8000dd8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dce:	f023 0206 	bic.w	r2, r3, #6
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd6:	e002      	b.n	8000dde <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f06f 0202 	mvn.w	r2, #2
 8000dee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000dfa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dfe:	d113      	bne.n	8000e28 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e04:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <HAL_ADC_Start+0x154>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d105      	bne.n	8000e16 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_ADC_Start+0x158>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d108      	bne.n	8000e28 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	e00c      	b.n	8000e42 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	e003      	b.n	8000e42 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40012800 	.word	0x40012800
 8000e50:	40012400 	.word	0x40012400

08000e54 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <HAL_ADC_Stop+0x1a>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e01a      	b.n	8000ea4 <HAL_ADC_Stop+0x50>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 fa7c 	bl	8001374 <ADC_ConversionStop_Disable>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d109      	bne.n	8000e9a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e8e:	f023 0301 	bic.w	r3, r3, #1
 8000e92:	f043 0201 	orr.w	r2, r3, #1
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ec2:	f7ff fe15 	bl	8000af0 <HAL_GetTick>
 8000ec6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00b      	beq.n	8000eee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eda:	f043 0220 	orr.w	r2, r3, #32
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e0d3      	b.n	8001096 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d131      	bne.n	8000f60 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d12a      	bne.n	8000f60 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f0a:	e021      	b.n	8000f50 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f12:	d01d      	beq.n	8000f50 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <HAL_ADC_PollForConversion+0x7e>
 8000f1a:	f7ff fde9 	bl	8000af0 <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d212      	bcs.n	8000f50 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d10b      	bne.n	8000f50 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3c:	f043 0204 	orr.w	r2, r3, #4
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e0a2      	b.n	8001096 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0d6      	beq.n	8000f0c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f5e:	e070      	b.n	8001042 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f60:	4b4f      	ldr	r3, [pc, #316]	; (80010a0 <HAL_ADC_PollForConversion+0x1f4>)
 8000f62:	681c      	ldr	r4, [r3, #0]
 8000f64:	2002      	movs	r0, #2
 8000f66:	f001 f9b7 	bl	80022d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6919      	ldr	r1, [r3, #16]
 8000f76:	4b4b      	ldr	r3, [pc, #300]	; (80010a4 <HAL_ADC_PollForConversion+0x1f8>)
 8000f78:	400b      	ands	r3, r1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d118      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0x104>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68d9      	ldr	r1, [r3, #12]
 8000f84:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <HAL_ADC_PollForConversion+0x1fc>)
 8000f86:	400b      	ands	r3, r1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d111      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0x104>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6919      	ldr	r1, [r3, #16]
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <HAL_ADC_PollForConversion+0x200>)
 8000f94:	400b      	ands	r3, r1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d108      	bne.n	8000fac <HAL_ADC_PollForConversion+0x100>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68d9      	ldr	r1, [r3, #12]
 8000fa0:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <HAL_ADC_PollForConversion+0x204>)
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_ADC_PollForConversion+0x100>
 8000fa8:	2314      	movs	r3, #20
 8000faa:	e020      	b.n	8000fee <HAL_ADC_PollForConversion+0x142>
 8000fac:	2329      	movs	r3, #41	; 0x29
 8000fae:	e01e      	b.n	8000fee <HAL_ADC_PollForConversion+0x142>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6919      	ldr	r1, [r3, #16]
 8000fb6:	4b3d      	ldr	r3, [pc, #244]	; (80010ac <HAL_ADC_PollForConversion+0x200>)
 8000fb8:	400b      	ands	r3, r1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d106      	bne.n	8000fcc <HAL_ADC_PollForConversion+0x120>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	68d9      	ldr	r1, [r3, #12]
 8000fc4:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <HAL_ADC_PollForConversion+0x204>)
 8000fc6:	400b      	ands	r3, r1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00d      	beq.n	8000fe8 <HAL_ADC_PollForConversion+0x13c>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6919      	ldr	r1, [r3, #16]
 8000fd2:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <HAL_ADC_PollForConversion+0x208>)
 8000fd4:	400b      	ands	r3, r1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d108      	bne.n	8000fec <HAL_ADC_PollForConversion+0x140>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68d9      	ldr	r1, [r3, #12]
 8000fe0:	4b34      	ldr	r3, [pc, #208]	; (80010b4 <HAL_ADC_PollForConversion+0x208>)
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <HAL_ADC_PollForConversion+0x140>
 8000fe8:	2354      	movs	r3, #84	; 0x54
 8000fea:	e000      	b.n	8000fee <HAL_ADC_PollForConversion+0x142>
 8000fec:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ff4:	e021      	b.n	800103a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffc:	d01a      	beq.n	8001034 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d007      	beq.n	8001014 <HAL_ADC_PollForConversion+0x168>
 8001004:	f7ff fd74 	bl	8000af0 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d20f      	bcs.n	8001034 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d90b      	bls.n	8001034 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	f043 0204 	orr.w	r2, r3, #4
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e030      	b.n	8001096 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	429a      	cmp	r2, r3
 8001040:	d8d9      	bhi.n	8000ff6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f06f 0212 	mvn.w	r2, #18
 800104a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001050:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001062:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001066:	d115      	bne.n	8001094 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800106c:	2b00      	cmp	r3, #0
 800106e:	d111      	bne.n	8001094 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d105      	bne.n	8001094 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108c:	f043 0201 	orr.w	r2, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000
 80010a4:	24924924 	.word	0x24924924
 80010a8:	00924924 	.word	0x00924924
 80010ac:	12492492 	.word	0x12492492
 80010b0:	00492492 	.word	0x00492492
 80010b4:	00249249 	.word	0x00249249

080010b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x20>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e0dc      	b.n	80012aa <HAL_ADC_ConfigChannel+0x1da>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b06      	cmp	r3, #6
 80010fe:	d81c      	bhi.n	800113a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	3b05      	subs	r3, #5
 8001112:	221f      	movs	r2, #31
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	4019      	ands	r1, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	3b05      	subs	r3, #5
 800112c:	fa00 f203 	lsl.w	r2, r0, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	635a      	str	r2, [r3, #52]	; 0x34
 8001138:	e03c      	b.n	80011b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b0c      	cmp	r3, #12
 8001140:	d81c      	bhi.n	800117c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	3b23      	subs	r3, #35	; 0x23
 8001154:	221f      	movs	r2, #31
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	4019      	ands	r1, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	3b23      	subs	r3, #35	; 0x23
 800116e:	fa00 f203 	lsl.w	r2, r0, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	631a      	str	r2, [r3, #48]	; 0x30
 800117a:	e01b      	b.n	80011b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	3b41      	subs	r3, #65	; 0x41
 800118e:	221f      	movs	r2, #31
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	4019      	ands	r1, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	3b41      	subs	r3, #65	; 0x41
 80011a8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b09      	cmp	r3, #9
 80011ba:	d91c      	bls.n	80011f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68d9      	ldr	r1, [r3, #12]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	3b1e      	subs	r3, #30
 80011ce:	2207      	movs	r2, #7
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	4019      	ands	r1, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6898      	ldr	r0, [r3, #8]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	3b1e      	subs	r3, #30
 80011e8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	e019      	b.n	800122a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6919      	ldr	r1, [r3, #16]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	2207      	movs	r2, #7
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	4019      	ands	r1, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	6898      	ldr	r0, [r3, #8]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	fa00 f203 	lsl.w	r2, r0, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b10      	cmp	r3, #16
 8001230:	d003      	beq.n	800123a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001236:	2b11      	cmp	r3, #17
 8001238:	d132      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d125      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d126      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001260:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b10      	cmp	r3, #16
 8001268:	d11a      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a13      	ldr	r2, [pc, #76]	; (80012bc <HAL_ADC_ConfigChannel+0x1ec>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	0c9a      	lsrs	r2, r3, #18
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001280:	e002      	b.n	8001288 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3b01      	subs	r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f9      	bne.n	8001282 <HAL_ADC_ConfigChannel+0x1b2>
 800128e:	e007      	b.n	80012a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	f043 0220 	orr.w	r2, r3, #32
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	40012400 	.word	0x40012400
 80012b8:	20000000 	.word	0x20000000
 80012bc:	431bde83 	.word	0x431bde83

080012c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d040      	beq.n	8001360 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0201 	orr.w	r2, r2, #1
 80012ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <ADC_Enable+0xac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <ADC_Enable+0xb0>)
 80012f4:	fba2 2303 	umull	r2, r3, r2, r3
 80012f8:	0c9b      	lsrs	r3, r3, #18
 80012fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012fc:	e002      	b.n	8001304 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	3b01      	subs	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f9      	bne.n	80012fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800130a:	f7ff fbf1 	bl	8000af0 <HAL_GetTick>
 800130e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001310:	e01f      	b.n	8001352 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001312:	f7ff fbed 	bl	8000af0 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d918      	bls.n	8001352 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b01      	cmp	r3, #1
 800132c:	d011      	beq.n	8001352 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	f043 0210 	orr.w	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133e:	f043 0201 	orr.w	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e007      	b.n	8001362 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d1d8      	bne.n	8001312 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000000 	.word	0x20000000
 8001370:	431bde83 	.word	0x431bde83

08001374 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b01      	cmp	r3, #1
 800138c:	d12e      	bne.n	80013ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0201 	bic.w	r2, r2, #1
 800139c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800139e:	f7ff fba7 	bl	8000af0 <HAL_GetTick>
 80013a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013a4:	e01b      	b.n	80013de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013a6:	f7ff fba3 	bl	8000af0 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d914      	bls.n	80013de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d10d      	bne.n	80013de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	f043 0210 	orr.w	r2, r3, #16
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	f043 0201 	orr.w	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e007      	b.n	80013ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d0dc      	beq.n	80013a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4906      	ldr	r1, [pc, #24]	; (8001490 <__NVIC_EnableIRQ+0x34>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800155c:	d301      	bcc.n	8001562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155e:	2301      	movs	r3, #1
 8001560:	e00f      	b.n	8001582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <SysTick_Config+0x40>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156a:	210f      	movs	r1, #15
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f7ff ff90 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <SysTick_Config+0x40>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <SysTick_Config+0x40>)
 800157c:	2207      	movs	r2, #7
 800157e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	e000e010 	.word	0xe000e010

08001590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff2d 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	60b9      	str	r1, [r7, #8]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b8:	f7ff ff42 	bl	8001440 <__NVIC_GetPriorityGrouping>
 80015bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff90 	bl	80014e8 <NVIC_EncodePriority>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff5f 	bl	8001494 <__NVIC_SetPriority>
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff35 	bl	800145c <__NVIC_EnableIRQ>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffa2 	bl	800154c <SysTick_Config>
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001614:	b480      	push	{r7}
 8001616:	b08b      	sub	sp, #44	; 0x2c
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001626:	e121      	b.n	800186c <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001628:	2201      	movs	r2, #1
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	429a      	cmp	r2, r3
 8001642:	f040 8110 	bne.w	8001866 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b12      	cmp	r3, #18
 800164c:	d034      	beq.n	80016b8 <HAL_GPIO_Init+0xa4>
 800164e:	2b12      	cmp	r3, #18
 8001650:	d80d      	bhi.n	800166e <HAL_GPIO_Init+0x5a>
 8001652:	2b02      	cmp	r3, #2
 8001654:	d02b      	beq.n	80016ae <HAL_GPIO_Init+0x9a>
 8001656:	2b02      	cmp	r3, #2
 8001658:	d804      	bhi.n	8001664 <HAL_GPIO_Init+0x50>
 800165a:	2b00      	cmp	r3, #0
 800165c:	d031      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
 800165e:	2b01      	cmp	r3, #1
 8001660:	d01c      	beq.n	800169c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001662:	e048      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001664:	2b03      	cmp	r3, #3
 8001666:	d043      	beq.n	80016f0 <HAL_GPIO_Init+0xdc>
 8001668:	2b11      	cmp	r3, #17
 800166a:	d01b      	beq.n	80016a4 <HAL_GPIO_Init+0x90>
          break;
 800166c:	e043      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800166e:	4a86      	ldr	r2, [pc, #536]	; (8001888 <HAL_GPIO_Init+0x274>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d026      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
 8001674:	4a84      	ldr	r2, [pc, #528]	; (8001888 <HAL_GPIO_Init+0x274>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d806      	bhi.n	8001688 <HAL_GPIO_Init+0x74>
 800167a:	4a84      	ldr	r2, [pc, #528]	; (800188c <HAL_GPIO_Init+0x278>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d020      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
 8001680:	4a83      	ldr	r2, [pc, #524]	; (8001890 <HAL_GPIO_Init+0x27c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d01d      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
          break;
 8001686:	e036      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001688:	4a82      	ldr	r2, [pc, #520]	; (8001894 <HAL_GPIO_Init+0x280>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
 800168e:	4a82      	ldr	r2, [pc, #520]	; (8001898 <HAL_GPIO_Init+0x284>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d016      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
 8001694:	4a81      	ldr	r2, [pc, #516]	; (800189c <HAL_GPIO_Init+0x288>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_Init+0xae>
          break;
 800169a:	e02c      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e028      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	3304      	adds	r3, #4
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e023      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	3308      	adds	r3, #8
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e01e      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	330c      	adds	r3, #12
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e019      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ca:	2304      	movs	r3, #4
 80016cc:	623b      	str	r3, [r7, #32]
          break;
 80016ce:	e012      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d105      	bne.n	80016e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d8:	2308      	movs	r3, #8
 80016da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	611a      	str	r2, [r3, #16]
          break;
 80016e2:	e008      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e4:	2308      	movs	r3, #8
 80016e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	615a      	str	r2, [r3, #20]
          break;
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
          break;
 80016f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2bff      	cmp	r3, #255	; 0xff
 80016fa:	d801      	bhi.n	8001700 <HAL_GPIO_Init+0xec>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	e001      	b.n	8001704 <HAL_GPIO_Init+0xf0>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3304      	adds	r3, #4
 8001704:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2bff      	cmp	r3, #255	; 0xff
 800170a:	d802      	bhi.n	8001712 <HAL_GPIO_Init+0xfe>
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	e002      	b.n	8001718 <HAL_GPIO_Init+0x104>
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	3b08      	subs	r3, #8
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	210f      	movs	r1, #15
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	401a      	ands	r2, r3
 800172a:	6a39      	ldr	r1, [r7, #32]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	431a      	orrs	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 8090 	beq.w	8001866 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001746:	4b56      	ldr	r3, [pc, #344]	; (80018a0 <HAL_GPIO_Init+0x28c>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a55      	ldr	r2, [pc, #340]	; (80018a0 <HAL_GPIO_Init+0x28c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6193      	str	r3, [r2, #24]
 8001752:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_GPIO_Init+0x28c>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800175e:	4a51      	ldr	r2, [pc, #324]	; (80018a4 <HAL_GPIO_Init+0x290>)
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a48      	ldr	r2, [pc, #288]	; (80018a8 <HAL_GPIO_Init+0x294>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00d      	beq.n	80017a6 <HAL_GPIO_Init+0x192>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a47      	ldr	r2, [pc, #284]	; (80018ac <HAL_GPIO_Init+0x298>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d007      	beq.n	80017a2 <HAL_GPIO_Init+0x18e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a46      	ldr	r2, [pc, #280]	; (80018b0 <HAL_GPIO_Init+0x29c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_GPIO_Init+0x18a>
 800179a:	2302      	movs	r3, #2
 800179c:	e004      	b.n	80017a8 <HAL_GPIO_Init+0x194>
 800179e:	2303      	movs	r3, #3
 80017a0:	e002      	b.n	80017a8 <HAL_GPIO_Init+0x194>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x194>
 80017a6:	2300      	movs	r3, #0
 80017a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017aa:	f002 0203 	and.w	r2, r2, #3
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	4093      	lsls	r3, r2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017b8:	493a      	ldr	r1, [pc, #232]	; (80018a4 <HAL_GPIO_Init+0x290>)
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d2:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4937      	ldr	r1, [pc, #220]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
 80017de:	e006      	b.n	80017ee <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e0:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	4932      	ldr	r1, [pc, #200]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017fa:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	492d      	ldr	r1, [pc, #180]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
 8001806:	e006      	b.n	8001816 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001808:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	43db      	mvns	r3, r3
 8001810:	4928      	ldr	r1, [pc, #160]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 8001812:	4013      	ands	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001822:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	4923      	ldr	r1, [pc, #140]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
 800182e:	e006      	b.n	800183e <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	43db      	mvns	r3, r3
 8001838:	491e      	ldr	r1, [pc, #120]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 800183a:	4013      	ands	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800184a:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	4919      	ldr	r1, [pc, #100]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	60cb      	str	r3, [r1, #12]
 8001856:	e006      	b.n	8001866 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	43db      	mvns	r3, r3
 8001860:	4914      	ldr	r1, [pc, #80]	; (80018b4 <HAL_GPIO_Init+0x2a0>)
 8001862:	4013      	ands	r3, r2
 8001864:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	3301      	adds	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	f47f aed6 	bne.w	8001628 <HAL_GPIO_Init+0x14>
  }
}
 800187c:	bf00      	nop
 800187e:	372c      	adds	r7, #44	; 0x2c
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	10210000 	.word	0x10210000
 800188c:	10110000 	.word	0x10110000
 8001890:	10120000 	.word	0x10120000
 8001894:	10310000 	.word	0x10310000
 8001898:	10320000 	.word	0x10320000
 800189c:	10220000 	.word	0x10220000
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010000 	.word	0x40010000
 80018a8:	40010800 	.word	0x40010800
 80018ac:	40010c00 	.word	0x40010c00
 80018b0:	40011000 	.word	0x40011000
 80018b4:	40010400 	.word	0x40010400

080018b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	e001      	b.n	80018da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	807b      	strh	r3, [r7, #2]
 80018f2:	4613      	mov	r3, r2
 80018f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018f6:	787b      	ldrb	r3, [r7, #1]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fc:	887a      	ldrh	r2, [r7, #2]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001902:	e003      	b.n	800190c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	041a      	lsls	r2, r3, #16
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	611a      	str	r2, [r3, #16]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
	...

08001918 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d006      	beq.n	800193c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f806 	bl	8001948 <HAL_GPIO_EXTI_Callback>
  }
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e26c      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8087 	beq.w	8001a8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800197c:	4b92      	ldr	r3, [pc, #584]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b04      	cmp	r3, #4
 8001986:	d00c      	beq.n	80019a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001988:	4b8f      	ldr	r3, [pc, #572]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b08      	cmp	r3, #8
 8001992:	d112      	bne.n	80019ba <HAL_RCC_OscConfig+0x5e>
 8001994:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a0:	d10b      	bne.n	80019ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a2:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d06c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x12c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d168      	bne.n	8001a88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e246      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x76>
 80019c4:	4b80      	ldr	r3, [pc, #512]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a7f      	ldr	r2, [pc, #508]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e02e      	b.n	8001a30 <HAL_RCC_OscConfig+0xd4>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x98>
 80019da:	4b7b      	ldr	r3, [pc, #492]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a7a      	ldr	r2, [pc, #488]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b78      	ldr	r3, [pc, #480]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a77      	ldr	r2, [pc, #476]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e01d      	b.n	8001a30 <HAL_RCC_OscConfig+0xd4>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0xbc>
 80019fe:	4b72      	ldr	r3, [pc, #456]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a71      	ldr	r2, [pc, #452]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b6f      	ldr	r3, [pc, #444]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6e      	ldr	r2, [pc, #440]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0xd4>
 8001a18:	4b6b      	ldr	r3, [pc, #428]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a6a      	ldr	r2, [pc, #424]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b68      	ldr	r3, [pc, #416]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a67      	ldr	r2, [pc, #412]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff f85a 	bl	8000af0 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff f856 	bl	8000af0 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e1fa      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b5d      	ldr	r3, [pc, #372]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0xe4>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff f846 	bl	8000af0 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff f842 	bl	8000af0 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1e6      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x10c>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d063      	beq.n	8001b5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a96:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aa2:	4b49      	ldr	r3, [pc, #292]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d11c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x18c>
 8001aae:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x176>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e1ba      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4939      	ldr	r1, [pc, #228]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e03a      	b.n	8001b5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7fe fffb 	bl	8000af0 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afe:	f7fe fff7 	bl	8000af0 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e19b      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4927      	ldr	r1, [pc, #156]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e015      	b.n	8001b5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <HAL_RCC_OscConfig+0x270>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7fe ffda 	bl	8000af0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b40:	f7fe ffd6 	bl	8000af0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e17a      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d03a      	beq.n	8001be0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d019      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7fe ffba 	bl	8000af0 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7fe ffb6 	bl	8000af0 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e15a      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f000 fac6 	bl	8002130 <RCC_Delay>
 8001ba4:	e01c      	b.n	8001be0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7fe ffa0 	bl	8000af0 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb2:	e00f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7fe ff9c 	bl	8000af0 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d908      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e140      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	42420000 	.word	0x42420000
 8001bd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	4b9e      	ldr	r3, [pc, #632]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e9      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80a6 	beq.w	8001d3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf2:	4b97      	ldr	r3, [pc, #604]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10d      	bne.n	8001c1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b94      	ldr	r3, [pc, #592]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a93      	ldr	r2, [pc, #588]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b91      	ldr	r3, [pc, #580]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c16:	2301      	movs	r3, #1
 8001c18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1a:	4b8e      	ldr	r3, [pc, #568]	; (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d118      	bne.n	8001c58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c26:	4b8b      	ldr	r3, [pc, #556]	; (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a8a      	ldr	r2, [pc, #552]	; (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c32:	f7fe ff5d 	bl	8000af0 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3a:	f7fe ff59 	bl	8000af0 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b64      	cmp	r3, #100	; 0x64
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0fd      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	4b81      	ldr	r3, [pc, #516]	; (8001e54 <HAL_RCC_OscConfig+0x4f8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x312>
 8001c60:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4a7a      	ldr	r2, [pc, #488]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6213      	str	r3, [r2, #32]
 8001c6c:	e02d      	b.n	8001cca <HAL_RCC_OscConfig+0x36e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x334>
 8001c76:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a75      	ldr	r2, [pc, #468]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	6213      	str	r3, [r2, #32]
 8001c82:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4a72      	ldr	r2, [pc, #456]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	f023 0304 	bic.w	r3, r3, #4
 8001c8c:	6213      	str	r3, [r2, #32]
 8001c8e:	e01c      	b.n	8001cca <HAL_RCC_OscConfig+0x36e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	d10c      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x356>
 8001c98:	4b6d      	ldr	r3, [pc, #436]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a6c      	ldr	r2, [pc, #432]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a69      	ldr	r2, [pc, #420]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	e00b      	b.n	8001cca <HAL_RCC_OscConfig+0x36e>
 8001cb2:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a66      	ldr	r2, [pc, #408]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	6213      	str	r3, [r2, #32]
 8001cbe:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a63      	ldr	r2, [pc, #396]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d015      	beq.n	8001cfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7fe ff0d 	bl	8000af0 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7fe ff09 	bl	8000af0 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e0ab      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	4b57      	ldr	r3, [pc, #348]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0ee      	beq.n	8001cda <HAL_RCC_OscConfig+0x37e>
 8001cfc:	e014      	b.n	8001d28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7fe fef7 	bl	8000af0 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7fe fef3 	bl	8000af0 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e095      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ee      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d105      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2e:	4b48      	ldr	r3, [pc, #288]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a47      	ldr	r2, [pc, #284]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8081 	beq.w	8001e46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d44:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d061      	beq.n	8001e14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d146      	bne.n	8001de6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d58:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <HAL_RCC_OscConfig+0x4fc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7fe fec7 	bl	8000af0 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d66:	f7fe fec3 	bl	8000af0 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e067      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8c:	d108      	bne.n	8001da0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d8e:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	492d      	ldr	r1, [pc, #180]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a19      	ldr	r1, [r3, #32]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	430b      	orrs	r3, r1
 8001db2:	4927      	ldr	r1, [pc, #156]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig+0x4fc>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fe97 	bl	8000af0 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe fe93 	bl	8000af0 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e037      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x46a>
 8001de4:	e02f      	b.n	8001e46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <HAL_RCC_OscConfig+0x4fc>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7fe fe80 	bl	8000af0 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7fe fe7c 	bl	8000af0 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e020      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x498>
 8001e12:	e018      	b.n	8001e46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e013      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40007000 	.word	0x40007000
 8001e58:	42420060 	.word	0x42420060

08001e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0d0      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e70:	4b6a      	ldr	r3, [pc, #424]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d910      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b67      	ldr	r3, [pc, #412]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 0207 	bic.w	r2, r3, #7
 8001e86:	4965      	ldr	r1, [pc, #404]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b63      	ldr	r3, [pc, #396]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0b8      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb8:	4b59      	ldr	r3, [pc, #356]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a58      	ldr	r2, [pc, #352]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ec2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed0:	4b53      	ldr	r3, [pc, #332]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a52      	ldr	r2, [pc, #328]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001edc:	4b50      	ldr	r3, [pc, #320]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	494d      	ldr	r1, [pc, #308]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d040      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	4b47      	ldr	r3, [pc, #284]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d115      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e07f      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e073      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e06b      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3a:	4b39      	ldr	r3, [pc, #228]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f023 0203 	bic.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4936      	ldr	r1, [pc, #216]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f4c:	f7fe fdd0 	bl	8000af0 <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7fe fdcc 	bl	8000af0 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e053      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 020c 	and.w	r2, r3, #12
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1eb      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d210      	bcs.n	8001fac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4922      	ldr	r1, [pc, #136]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e032      	b.n	8002012 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d008      	beq.n	8001fca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4916      	ldr	r1, [pc, #88]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	490e      	ldr	r1, [pc, #56]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fea:	f000 f821 	bl	8002030 <HAL_RCC_GetSysClockFreq>
 8001fee:	4601      	mov	r1, r0
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	5cd3      	ldrb	r3, [r2, r3]
 8001ffe:	fa21 f303 	lsr.w	r3, r1, r3
 8002002:	4a09      	ldr	r2, [pc, #36]	; (8002028 <HAL_RCC_ClockConfig+0x1cc>)
 8002004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x1d0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fd2e 	bl	8000a6c <HAL_InitTick>

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40022000 	.word	0x40022000
 8002020:	40021000 	.word	0x40021000
 8002024:	080024e8 	.word	0x080024e8
 8002028:	20000000 	.word	0x20000000
 800202c:	20000004 	.word	0x20000004

08002030 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002030:	b490      	push	{r4, r7}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002036:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002038:	1d3c      	adds	r4, r7, #4
 800203a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800203c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800205a:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b04      	cmp	r3, #4
 8002068:	d002      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x40>
 800206a:	2b08      	cmp	r3, #8
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x46>
 800206e:	e02d      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002070:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002072:	623b      	str	r3, [r7, #32]
      break;
 8002074:	e02d      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	0c9b      	lsrs	r3, r3, #18
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002082:	4413      	add	r3, r2
 8002084:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002088:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d013      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0c5b      	lsrs	r3, r3, #17
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020a2:	4413      	add	r3, r2
 80020a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ae:	fb02 f203 	mul.w	r2, r2, r3
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	e004      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	623b      	str	r3, [r7, #32]
      break;
 80020ca:	e002      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ce:	623b      	str	r3, [r7, #32]
      break;
 80020d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d2:	6a3b      	ldr	r3, [r7, #32]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3728      	adds	r7, #40	; 0x28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc90      	pop	{r4, r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	080024c0 	.word	0x080024c0
 80020e4:	080024d0 	.word	0x080024d0
 80020e8:	40021000 	.word	0x40021000
 80020ec:	007a1200 	.word	0x007a1200
 80020f0:	003d0900 	.word	0x003d0900

080020f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f8:	4b02      	ldr	r3, [pc, #8]	; (8002104 <HAL_RCC_GetHCLKFreq+0x10>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	20000000 	.word	0x20000000

08002108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800210c:	f7ff fff2 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 8002110:	4601      	mov	r1, r0
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	0adb      	lsrs	r3, r3, #11
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	4a03      	ldr	r2, [pc, #12]	; (800212c <HAL_RCC_GetPCLK2Freq+0x24>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000
 800212c:	080024f8 	.word	0x080024f8

08002130 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <RCC_Delay+0x34>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <RCC_Delay+0x38>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0a5b      	lsrs	r3, r3, #9
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800214c:	bf00      	nop
  }
  while (Delay --);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1e5a      	subs	r2, r3, #1
 8002152:	60fa      	str	r2, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f9      	bne.n	800214c <RCC_Delay+0x1c>
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000
 8002168:	10624dd3 	.word	0x10624dd3

0800216c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b00      	cmp	r3, #0
 8002186:	d07d      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218c:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10d      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002198:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	4a4b      	ldr	r2, [pc, #300]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a2:	61d3      	str	r3, [r2, #28]
 80021a4:	4b49      	ldr	r3, [pc, #292]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b0:	2301      	movs	r3, #1
 80021b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d118      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c0:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a42      	ldr	r2, [pc, #264]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021cc:	f7fe fc90 	bl	8000af0 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	e008      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d4:	f7fe fc8c 	bl	8000af0 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b64      	cmp	r3, #100	; 0x64
 80021e0:	d901      	bls.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e06d      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021f2:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d02e      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	429a      	cmp	r2, r3
 800220e:	d027      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002210:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002218:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800221a:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002220:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002226:	4a29      	ldr	r2, [pc, #164]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d014      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe fc5b 	bl	8000af0 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223c:	e00a      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7fe fc57 	bl	8000af0 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e036      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ee      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4917      	ldr	r1, [pc, #92]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226e:	4313      	orrs	r3, r2
 8002270:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002272:	7dfb      	ldrb	r3, [r7, #23]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d105      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	4a13      	ldr	r2, [pc, #76]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002282:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	490b      	ldr	r1, [pc, #44]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	4904      	ldr	r1, [pc, #16]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40007000 	.word	0x40007000
 80022d4:	42420440 	.word	0x42420440

080022d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b08d      	sub	sp, #52	; 0x34
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022e0:	4b55      	ldr	r3, [pc, #340]	; (8002438 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80022e2:	f107 040c 	add.w	r4, r7, #12
 80022e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
 80022f6:	2300      	movs	r3, #0
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	2300      	movs	r3, #0
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d07f      	beq.n	800240c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800230c:	2b10      	cmp	r3, #16
 800230e:	d002      	beq.n	8002316 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002310:	2b01      	cmp	r3, #1
 8002312:	d048      	beq.n	80023a6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002314:	e08b      	b.n	800242e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002316:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800231c:	4b48      	ldr	r3, [pc, #288]	; (8002440 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d07f      	beq.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	0c9b      	lsrs	r3, r3, #18
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002334:	4413      	add	r3, r2
 8002336:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800233a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d018      	beq.n	8002378 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002346:	4b3e      	ldr	r3, [pc, #248]	; (8002440 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	0c5b      	lsrs	r3, r3, #17
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002354:	4413      	add	r3, r2
 8002356:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002366:	4a37      	ldr	r2, [pc, #220]	; (8002444 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	fbb2 f2f3 	udiv	r2, r2, r3
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	fb02 f303 	mul.w	r3, r2, r3
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002376:	e004      	b.n	8002382 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	4a33      	ldr	r2, [pc, #204]	; (8002448 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002382:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238e:	d102      	bne.n	8002396 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002394:	e048      	b.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4a2c      	ldr	r2, [pc, #176]	; (800244c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80023a4:	e040      	b.n	8002428 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b6:	d108      	bne.n	80023ca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80023c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c8:	e01f      	b.n	800240a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d4:	d109      	bne.n	80023ea <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80023d6:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80023e2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e8:	e00f      	b.n	800240a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023f4:	d11a      	bne.n	800242c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d014      	beq.n	800242c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002402:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002408:	e010      	b.n	800242c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800240a:	e00f      	b.n	800242c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800240c:	f7ff fe7c 	bl	8002108 <HAL_RCC_GetPCLK2Freq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	0b9b      	lsrs	r3, r3, #14
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	3301      	adds	r3, #1
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002426:	e002      	b.n	800242e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002428:	bf00      	nop
 800242a:	e000      	b.n	800242e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800242c:	bf00      	nop
    }
  }
  return (frequency);
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002430:	4618      	mov	r0, r3
 8002432:	3734      	adds	r7, #52	; 0x34
 8002434:	46bd      	mov	sp, r7
 8002436:	bd90      	pop	{r4, r7, pc}
 8002438:	080024d4 	.word	0x080024d4
 800243c:	080024e4 	.word	0x080024e4
 8002440:	40021000 	.word	0x40021000
 8002444:	007a1200 	.word	0x007a1200
 8002448:	003d0900 	.word	0x003d0900
 800244c:	aaaaaaab 	.word	0xaaaaaaab

08002450 <__libc_init_array>:
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	2500      	movs	r5, #0
 8002454:	4e0c      	ldr	r6, [pc, #48]	; (8002488 <__libc_init_array+0x38>)
 8002456:	4c0d      	ldr	r4, [pc, #52]	; (800248c <__libc_init_array+0x3c>)
 8002458:	1ba4      	subs	r4, r4, r6
 800245a:	10a4      	asrs	r4, r4, #2
 800245c:	42a5      	cmp	r5, r4
 800245e:	d109      	bne.n	8002474 <__libc_init_array+0x24>
 8002460:	f000 f822 	bl	80024a8 <_init>
 8002464:	2500      	movs	r5, #0
 8002466:	4e0a      	ldr	r6, [pc, #40]	; (8002490 <__libc_init_array+0x40>)
 8002468:	4c0a      	ldr	r4, [pc, #40]	; (8002494 <__libc_init_array+0x44>)
 800246a:	1ba4      	subs	r4, r4, r6
 800246c:	10a4      	asrs	r4, r4, #2
 800246e:	42a5      	cmp	r5, r4
 8002470:	d105      	bne.n	800247e <__libc_init_array+0x2e>
 8002472:	bd70      	pop	{r4, r5, r6, pc}
 8002474:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002478:	4798      	blx	r3
 800247a:	3501      	adds	r5, #1
 800247c:	e7ee      	b.n	800245c <__libc_init_array+0xc>
 800247e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002482:	4798      	blx	r3
 8002484:	3501      	adds	r5, #1
 8002486:	e7f2      	b.n	800246e <__libc_init_array+0x1e>
 8002488:	08002500 	.word	0x08002500
 800248c:	08002500 	.word	0x08002500
 8002490:	08002500 	.word	0x08002500
 8002494:	08002504 	.word	0x08002504

08002498 <memset>:
 8002498:	4603      	mov	r3, r0
 800249a:	4402      	add	r2, r0
 800249c:	4293      	cmp	r3, r2
 800249e:	d100      	bne.n	80024a2 <memset+0xa>
 80024a0:	4770      	bx	lr
 80024a2:	f803 1b01 	strb.w	r1, [r3], #1
 80024a6:	e7f9      	b.n	800249c <memset+0x4>

080024a8 <_init>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	bf00      	nop
 80024ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ae:	bc08      	pop	{r3}
 80024b0:	469e      	mov	lr, r3
 80024b2:	4770      	bx	lr

080024b4 <_fini>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	bf00      	nop
 80024b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ba:	bc08      	pop	{r3}
 80024bc:	469e      	mov	lr, r3
 80024be:	4770      	bx	lr
